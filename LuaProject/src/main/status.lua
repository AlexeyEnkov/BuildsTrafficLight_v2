return function(succCb, failCb)    local busy = false    local bStatus    local rStatus = _C.OK    local idInd = 1;    local ids    local CFG = loadScript("get_cfg")()    local function nextId()        busy = true        local id = ids[idInd]        idInd = idInd + 1;        if bStatus ~= _C.B_FAIL and id and rStatus == _C.OK then            for i, v in pairs(CFG.ignoredIds) do                if id == v then busy = false return end            end            http.get("http://" .. CFG.ip .. ":" .. CFG.port .. "/guestAuth/app/rest/buildTypes/id:" .. id .. "/builds/?locator=count:2,running:any",                "Accept: application/json\r\n",                function(code, data)                    local function safe(code, data)                        busy = false                        if (code ~= 200) then                            if (code < 0) then                                rStatus = _C.C_ERR                            else                                rStatus = _C.R_ERR                            end                        else                            local json = cjson.decode(data)                            data = nil                            local len = #json.build                            if (len > 0) then                                if (json.build[1]).status == "FAILURE" then                                    bStatus = _C.B_FAIL _G["targetId"] = id                                else                                    if (len >= 2) then                                        if (json.build[1]).state == "running" and (json.build[2]).status == "FAILURE" then                                            bStatus = _C.B_RUN _G["targetId"] = id                                        end                                    end                                end                            end                            json = nil                        end                    end                    if not pcall(safe, code, data) then                        rStatus = _C.P_ERR                    end                end)        else            if rStatus == _C.OK then                if bStatus == nil then bStatus = _C.B_SUCC end                succCb(bStatus)            else                failCb(rStatus)            end            tmr.unregister(_C.STAT_TMR)            ids = nil        end    end    if wifi.sta.status() == wifi.STA_GOTIP then        ids = loadScript("get_ids")()        tmr.register(_C.STAT_TMR,            10,            tmr.ALARM_AUTO,            function()                if busy then return end                nextId()            end)        tmr.start(_C.STAT_TMR)    else        failCb(_C.WIFI_ERR)    endend